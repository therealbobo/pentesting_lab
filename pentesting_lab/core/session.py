#! /usr/bin/env python

import os
import json
import pentesting_lab.core.global_vars as global_vars
import pentesting_lab.core.vmconfig
import pentesting_lab.core.vde2

sessions_path = global_vars.sessions_path


class Session:
    def __init__(self, vm_configs=list(), vde_configs=list()):
        self.vm_configs = vm_configs
        self.vde_configs = vde_configs

    def save(self, path=sessions_path):
        config = {}
        config['General'] = None
        config['vde_configs'] = [switch.serialize() for switch in self.vde_configs]
        config['vm_configs'] = [vm.serialize() for vm in self.vm_configs] 
        with open(path, 'w') as configfile:
            configfile.write(json.dumps(config, indent = 4))


    def load(self, path=sessions_path):
        self.vm_configs = list()
        self.vde_configs = list()
        if os.path.isfile(path):
            with open(path) as json_file:  
                data = json.load(json_file)
                
                for switch in data['vde_configs']:
                    to_append = pentesting_lab.core.vde2.VdeSwitch(switch['fd'],
                            sniff=switch['sniff'])
                    self.vde_configs.append(to_append)
                    to_append.create_switch()

                for vm in data['vm_configs']:
                    to_append = pentesting_lab.core.vmconfig.VMConfig()
                    to_append.__dict__ = vm
                    self.vm_configs.append(to_append)
                return True
        return False


    def add_vm(self, config):
        self.vm_configs.append(config)

    def add_iface(self, config):
        self.vde_configs.append(config)

    def show(self):
        for vm in self.vm_configs:
            print(vm)
        for iface in self.vde_configs:
            print(iface)

    def __repr__(self):
        result = ''
        for vm in self.vm_configs:
            result += str(vm)
        for switch in self.vde_configs:
            result += '\n' + str(switch)
        return result
