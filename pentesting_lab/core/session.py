#! /usr/bin/env python

import configparser
import os
import json
import pentesting_lab.core.preferences
import pentesting_lab.core.vmconfig
import pentesting_lab.core.vde2

# session components:
#   vms config
#   vde config
#   generals ??

sessions_path = pentesting_lab.core.preferences.sessions_path


class Session:
    def __init__(self, vm_configs=list(), vde_configs=list()):
        self.vm_configs = vm_configs
        self.vde_configs = vde_configs

    def save(self, path=sessions_path):
        config = configparser.ConfigParser()
        config['General'] = {}
        general = config['General']
        general['vde_configs'] = json.dumps([switch.serialize() for switch in self.vde_configs])
        general['vm_configs'] = json.dumps([vm.serialize() for vm in self.vm_configs])
        with open(path, 'w') as configfile:
            config.write(configfile)


    def load(self, path=sessions_path):
        self.vm_configs = list()
        self.vde_configs = list()
        config = configparser.ConfigParser()
        if os.path.isfile(path):
            config.read(path)
            try:
                vm_list = json.loads(config['General']['vm_configs'])
                for vm in vm_list:
                    to_append = pentesting_lab.core.vmconfig.VMConfig()
                    to_append.__dict__ = json.loads(vm)
                    self.vm_configs.append(to_append)

                switch_list = json.loads(config['General']['vde_configs'])
                for switch in switch_list:
                    to_append = pentesting_lab.core.vde2.VdeSwitch(json.loads(switch)['fd'])
                    self.vde_configs.append(to_append)
                    to_append.create_switch()
            except:
                return False
            return True
        else:
            return False

    def add_vm(self, config):
        self.vm_configs.append(config)

    def add_iface(self, config):
        self.vde_configs.append(config)

    def show(self):
        for vm in self.vm_configs:
            print(vm)
        for iface in self.vde_configs:
            print(iface)

    def __repr__(self):
        result = ''
        for vm in self.vm_configs:
            result += str(vm)
        for switch in self.vde_configs:
            result += '\n' + str(switch)
        return result


#Config example:
#
#[General]
#ServerAliveInterval = 45
#Compression = yes
#CompressionLevel = 9
#ForwardX11 = yes
#
#[VMConfigs]
#{json}
#
#[VDEConfig]
#{json}


