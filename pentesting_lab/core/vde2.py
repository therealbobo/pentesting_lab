#! /usr/bin/env python3

import os
import subprocess
import json
import pentesting_lab.core.preferences

switch_folder = pentesting_lab.core.preferences.switches_path
dump_path = None
vde_conf_path = None
plugin_path = '/lib/vde2/plugins/pdump.so'

class VdeSwitch:
    aux_cat = None

    def __init__(self, fd,sniff=False):
        self.name = fd
        self.fd = switch_folder + "/" + self.name
        self.sniff = sniff

    def create_switch(self):
        #TODO change configs path
        #TODO change path
        path = '/tmp/'
        if self.sniff:
            dump_path = path + self.name + '_dump.pcap'
            self.dump = dump_path
            vde_conf_path = path + '{}_vde_pdump.conf'.format(self.name)
            conf_file = """\
    plugin/add {}
    pdump/filename {}
    pdump/buffered 0
    pdump/active 1 
    """.format(plugin_path,dump_path)
            with open(vde_conf_path,'w') as f:
                f.write(conf_file)
                f.close()
            cmd = ["vde_switch","-F","-s",self.fd,"-f",vde_conf_path]
        else:
            cmd = ["vde_switch","-F","-s",self.fd]
        self.p = subprocess.Popen(cmd, stdin=subprocess.DEVNULL, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    def halt_switch(self):
        self.p.terminate()
        os.remove(self.dump)
        os.remove(path + '{}_vde_pdump.conf'.format(self.name))
        os.remove(path + self.name + '_dump.pcap')


    def get_iface(self):
        return self.fd

    def serialize(self):
        return {"fd":self.name}


    def deserialize(self):
        pass

    def __repr__(self):
        result = "\n----------------\n"
        result += "VdeSwitch: {}=\n".format(self.fd)
        result += "Sniff: {}".format(self.sniff)
        return result

