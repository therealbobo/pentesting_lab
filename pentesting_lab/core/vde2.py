#! /usr/bin/env python3

import os
import subprocess
import json
import pentesting_lab.core.preferences

switch_folder = pentesting_lab.core.preferences.switches_path
fifo_path = None
vde_conf_path = None
plugin_path = '/lib/vde2/plugins/pdump.so'

class VdeSwitch:

    def __init__(self, fd):
        self.name = fd
        self.fd = switch_folder + "/" + self.name

    def create_switch(self):
        #TODO change configs path
        path = '/tmp/'
        fifo_path = path + self.name + '_fifo'
        vde_conf_path = path + 'vde_pdump_{}.conf'.format(self.name)
        cmd = 'mkfifo {}'.format(fifo_path)
        conf_file = """\
plugin/add {}
pdump/filename {}
pdump/buffered 0
pdump/active 1 
""".format(plugin_path,fifo_path)
        with open(vde_conf_path,'w') as f:
            f.write(conf_file)
            f.close()

        p_fifo = subprocess.run(cmd, shell=True)
        
        cmd = ["vde_switch","-s",self.fd]
        #cmd = ["vde_switch","-F","-s",self.fd,"-f",vde_conf_path]
        #cmd = ["vde_switch","-s",self.fd,"-f",vde_conf_path]
        self.p = subprocess.Popen(cmd, stdin=subprocess.DEVNULL, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    def halt_switch(self):
        self.p.terminate()
        os.remove(fifo_path)
        os.remove(vde_conf_path)
    
    def get_iface(self):
        return self.fd

    def serialize(self):
        return {"fd":self.name}


    def deserialize(self):
        pass

    def __repr__(self):
        result = "\n----------------\n"
        result += "VdeSwitch: {}".format(self.fd)
        return result

