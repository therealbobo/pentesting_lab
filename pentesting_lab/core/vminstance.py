#! /usr/bin/env python3

import sys
import os
import re
import vagrant
import subprocess
import shutil
import pentesting_lab.core.vmconfig
import pentesting_lab.core.global_vars as global_vars
from pentesting_lab.core.vde2 import VdeSwitch


base_path = global_vars.vms_base_path
cwd = os.getcwd()


class GuestMachine:
    def __init__(self, configuration):
        self.config = configuration
        self.path = base_path + self.config.name

    def setup(self):
        try:
            os.mkdir(self.path, mode=0o755)
        except FileExistsError:
            pass
        os.chdir(self.path)
        self.v = vagrant.Vagrant()
        self.v.init()

        # Writing configuration files
        vagrant_file = open("Vagrantfile","w")
        vagrant_file.write(self.config.vagrantfile())
        vagrant_file.close()
        # TODO: mod for more playbooks
        #for playbook in playbooks:
        #    shutil.copyfile(cwd+"/playbooks/"+playbook,playbook)
        #
        ansible_playbook = open("general.yml","w")
        ansible_playbook.write(self.config.ansible_playbook())
        ansible_playbook.close()

        os.chdir(cwd)

    def up(self):
        os.chdir(self.path)
        for s in self.v.up(stream_output=True):
            print(s, end='')
        os.chdir(cwd)

    def halt(self):
        os.chdir(self.path)
        self.v.halt()
        os.chdir(cwd)

    def cmd(self, command):
        os.chdir(self.path)
        result = self.v.ssh(command=command)
        os.chdir(cwd)
        return result

    def ssh(self):
        os.chdir(self.path)
        p = subprocess.run("vagrant ssh",shell=True)
        os.chdir(cwd)
        #return result

    def cleanup(self,destroy=True):
        self.halt()
        if destroy:
            try:
                os.chdir(self.path)
                self.v.destroy()
                os.chdir(cwd)
                shutil.rmtree(self.path)
            except FileNotFoundError:
                pass







def startup():
    f = open(global_vars.available_boxes_path,"r")
    boxes = list(filter(None, f.read().split("\n")))
    f.close()
    return boxes


