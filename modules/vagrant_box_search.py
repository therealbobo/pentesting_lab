

class VagrantBoxSearchModule:
    import argparse
    import cmd2
    def search(box_name):
        page = requests.get(BASE_URL + QUERY.format(provider,box_name))
        soup = bs4.BeautifulSoup(page.content, 'html.parser')
        result = list()
        for i in soup.findAll("a", {"class": "list-group-item"}):
            #link = i['href']
            description = i.findAll("div", {"class": "col-md-5"})
            for d in description:
                result.append(d.find('h4').text)

#### template methods ####
    boxsearch_parser = argparse.ArgumentParser()
    boxsearch_parser.add_argument('name', help='name of the box')

    @cmd2.with_argparser(boxsearch_parser)
    def do_search_box(self,args):
        """Search for a vagrant box by name"""
        import bs4
        import requests
        import prettytable
        from prettytable import PrettyTable
        BASE_URL = 'https://app.vagrantup.com'
        QUERY = '/boxes/search?provider={}&q={}&sort=downloads&utf8=%E2%9C%93'
        provider = 'virtualbox'

        box_name = args.name
        page = requests.get(BASE_URL + QUERY.format(provider,box_name))
        soup = bs4.BeautifulSoup(page.content, 'html.parser')
        print("Found boxes:")
        t = PrettyTable(['BoxName', 'Version'])
        for i in soup.findAll("a", {"class": "list-group-item"}):
            #link = i['href']
            description = i.findAll("div", {"class": "col-md-5"})
            for d in description:
                tmp_list = [e.strip() for e in d.find('h4').text.split('\n')]
                t.add_row(list(filter(None,tmp_list)))
        print(t)


        
    def complete_search_box(self, text, line, begidx, endidx):
        #template_cmd_strs = ['test1','test2']
        #index_dict = \
        #    { 
        #        1: template_cmd_strs 
        #    }
        #return self.index_based_complete(text, line, begidx, endidx, index_dict=index_dict)
        #TODO
        pass

