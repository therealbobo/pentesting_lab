

class BoxManagementModule:
    import argparse
    import cmd2
#### template methods ####
    box_management_parser = argparse.ArgumentParser()
    box_management_parser.add_argument('cmd', help='= (add|list|remove|update)')
    box_management_parser.add_argument('box_name', nargs='?', help='= name of the box or the path')

    @cmd2.with_argparser(box_management_parser)
    def do_box_management(self,args):
        """Manage vagrant boxes"""
        import os
        import re
        import subprocess
        from prettytable import PrettyTable
        from termcolor import colored
        if args.cmd == 'add':
            if os.path.exists(args.box_name):
                name = input('Insert the name of the box: ')
                cmd = 'vagrant box add ' + args.box_name + ' --name ' + name
                p = subprocess.run(cmd,shell=True)
            else:
                cmd = 'vagrant box add ' + args.box_name
                p = subprocess.run(cmd,shell=True)

        elif args.cmd == 'list':
            cmd = 'vagrant box list'
            p = subprocess.run(cmd,shell=True,
                    stdout=subprocess.PIPE,stderr=subprocess.DEVNULL)
            boxes = p.stdout.decode('utf-8').split('\n')
            boxes = [i for i in boxes if i] 
            result = PrettyTable()
            result.field_names = [colored('Boxes','blue'),
                    colored('Version','blue'),colored('Provider','blue')]
            for b in boxes:
                b = re.split('( |,|\(|\))',b)
                b = [i for i in b if i and not re.match('( |,|\(|\))',i)] 
                name = b[0]
                version = b[2]
                provider = b[1]
                result.add_row([name,version,provider])
            print(result)

        elif args.cmd == 'remove':
            cmd = 'vagrant box remove ' + args.box_name
            p = subprocess.run(cmd,shell=True)

        elif args.cmd == 'update':
            cmd = 'vagrant box update ' + args.box_name
            p = subprocess.run(cmd,shell=True)


    def complete_box_management(self, text, line, begidx, endidx):
        box_management_cmd_strs = ['add','list','outdated','remove','update']
        index_dict = \
            { 
                1: box_management_cmd_strs
            }
        return self.index_based_complete(text, line, begidx, endidx, index_dict=index_dict)

