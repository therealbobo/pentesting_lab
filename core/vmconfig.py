#! /usr/bin/env python3

import core.preferences
import core.provisioning_ansible_playbook as provisioning_ansible_playbook
import core.preferences
import json

switches_path = core.preferences.switches_path

class VMConfig:
    def __init__(self, name=None, box="ubuntu/xenial64", gui=False, linked_clone=False, network_interfaces=list(), packages=list(), playbooks=list()):
        self.name = name
        self.box = box
        self.gui = gui
        self.linked_clone = linked_clone
        self.network_interfaces = [switches_path + '/' + iface for iface in network_interfaces] 
        # TODO
        # packages as maps so they can change state (present/absent)
        self.packages = packages
        # TODO
        # map of ip-ifaces
        #######
        self.playbooks = playbooks

    def add_pkg(package):
        self.packages.append(package)

    #TODO
    def remove_pkg(package):
        self.packages.remove(package)

    def add_iface(self, iface):
        self.network_interfaces.append(switches_path + '/' + iface)

    def remove_iface(self, iface):
        self.network_interfaces.remove(switches_path + '/' + iface)

    def vagrant_config(self):
        config = """
  ###### VAGRANT CONFIG ######
  config.vm.box = "{box}"
  config.vm.define "{name}" do |t|
  end
  config.vm.hostname = "{hostname}"
""".format(box=self.box, name=self.name, hostname=self.name)
        return config

    def iface_config(self, iface):
        base = """
	  # VDE SWICH ({iface})
	  vb.customize ["modifyvm", :id, "--nic{iface_number}","generic"]
	  vb.customize ["modifyvm", :id, "--nicgenericdrv{iface_number}","VDE"]
	  vb.customize ["modifyvm", :id, "--nicproperty{iface_number}","network={iface}"]
"""
        # 2 default ifaces
        iface_number = self.network_interfaces.index(iface) + 3
        return base.format(iface_number=iface_number, iface=iface)

        
    def vb_config(self):
        config = '\n\n  config.vm.provider "virtualbox" do |vb|\n'
        #setting up name
        config += """
	  ###### VIRTUALBOX CONFIG ######
	  # VM NAME
	  vb.name = "{name}"
""".format(name=self.name)
        #setting up gui
        config += """
	  # GUI MODE
	  vb.gui = {name}
""".format(name=str(self.gui).lower())
        config += """
	  # IMPORTING MODE
	  vb.linked_clone = {linked_clone}
""".format(linked_clone=str(self.linked_clone).lower())
        if len(self.network_interfaces) > 0:
            config += """
	  ###### NETWORK CONFIG ###### """
        for iface in self.network_interfaces:
            config += self.iface_config(iface)
        config += "  end"
        return config

    def ansible_config(self):
        config = """\n\n
  ###### ANSIBLE GENERAL CONFIG ######
  config.vm.provision "ansible" do |ansible|
	   ansible.playbook = "general.yml"
	   ansible.extra_vars = { ansible_python_interpreter:"/usr/bin/python3" }
  end"""
        for playbook in self.playbooks:
            config += """\n\n
  ###### ANSIBLE {} CONFIG ######
  config.vm.provision "ansible" do |ansible|
	   ansible.playbook = "{}"
	   ansible.extra_vars = { ansible_python_interpreter:"/usr/bin/python3" }
  end""".format(playbook[:-5].upper(), playbook)
        return config

    def vagrantfile(self):
        vagrantfile = """Vagrant.configure("2") do |config|\n\n"""
        vagrantfile += self.vagrant_config()
        vagrantfile += self.vb_config()
        vagrantfile += self.ansible_config()
        vagrantfile += "\n\nend"
        return vagrantfile


    def ansible_playbook(self):
        provisioning_playbook = provisioning_ansible_playbook.ProvisioningPlaybook(self.packages)       
        self.provisioning_playbook = provisioning_playbook.get_playbook()
        return self.provisioning_playbook

    def save(self):
        return json.dumps(self.__dict__)

    def load(self, json_data):
        self.__dict__ = json.loads(json_data)

    def __repr__(self):
    #name=None, box="ubuntu/xenial64", gui=False, linked_clone=False, network_interfaces=list(), packages=list()):
        result = "\n----------------\n"
        result += "Name: {}\n".format(self.name)
        result += "Box: {}\n".format(self.box)
        result += "Gui: {}\n".format(self.gui)
        result += "linke_clone: {}\n".format(self.linked_clone)
        if len(self.network_interfaces) > 0:
            result += "IFaces:\n"
            for iface in self.network_interfaces:
                result += "\tiface: {}\n".format(iface)
        if len(self.packages) > 0:
            result += "Packages:\n"
            for pkg in self.packages:
                result += "\tpkg: {}\n".format(pkg)
        result += "\n"
        return result

