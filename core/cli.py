#! /usr/bin/env python3

import sys
import re 



import core.preferences as preferences
import core.vmconfig as vmconfig
import core.vminstance as vminstance
import core.vde2 as vde2
import core.session as session
import core.presentation as presentation
#from utils.completer import Completer
import utils.vagrant_utils as vagrant_utils

try: import gnureadline as readline
except ImportError:
    import readline

#TODO move in utils/completer
class Completer:
    def __init__(self, options):
        self.options = options
        self.current_candidates = []

    def complete(self, text, state): 
        response = None 
        if state == 0:
            original_line = readline.get_line_buffer()
            begin = readline.get_begidx()
            end = readline.get_endidx()
            being_completed = original_line[begin:end]
            words = original_line.split()
            
            if not words:
                self.current_candidates = sorted(self.options.keys())
            else:
                try:
                    if begin == 0:
                        #first word
                        candidates = self.options.keys()
                    else:
                        # later word
                        first = words[0]
                        candidates = self.options[first]
                    
                    if being_completed:
                        self.current_candidates = [ w for w in candidates if w.startswith(being_completed)]
                    else:
                        self.current_candidates = candidates
                except (KeyError, IndexError) as err: 
                    self.current_candidates = [] 
        try:
            response = self.current_candidates[state]
        except IndexError:
            response = None

        return response


#########################################################

current_session = session.Session()
vminstances = list()
vde_switches = list()
#TODO

def vm_list():
    return presentation.print_vms_general(current_session)

def iface_list():
    return presentation.print_network_interfaces(current_session)

def show_available_boxes():
    f = open('boxes.txt','r')
    print("Available boxes:")
    for line in f.read().split('\n'):
        print(line)

def create_inteface():
    print("--- Creating net interface ---")
    name = input("Enter iface name: ")
    switch = vde2.VdeSwitch(name)
    switch.create_switch()
    current_session.add_iface(switch)

def create_machine():
    print("--- Creating machine ---")
    name = input("Enter name of vm: ")
    show_available_boxes()
    box = input("Enter name of the box: ")
    network_interfaces = list(filter(None, input("Enter network interfaces: ").split(" ")))
    packages = list(filter(None, input("Enter packages: ").split(" ")))
    playbooks = list(filter(None, input("Enter playbooks: ").split(" ")))
    #TODO: better parsing, multiple select
    config = vmconfig.VMConfig(name=name, box=box, gui=False, linked_clone=False,
            network_interfaces=network_interfaces, packages=packages, playbooks=playbooks)
    current_session.add_vm(config)

def ssh(machine):
    for vm in vminstances:
        if vm.config.name == machine:
            vm.ssh()


OPTIONS = {
        'vm':['list','create'],
        'iface':['list','create'],
        'session':['show','create','save','load','start'],
        'ssh':[],
        'help':[],
        'exit':[]
    }


def load_session():
    print("Session file path (default ./session.cfg:", end="")
    path = input()
    if not path.strip():
        path = "./session.cfg"
    try:
        f = open(path,"r")
    except FileNotFoundError:
        pass
    #TODO
    return

def save_session():
    current_session.save()
    #TODO
    pass

def start_session():
    #TODO
    vminstances = list()
    for vmconfig in current_session.vm_configs:
        vminstances.append(vminstance.GuestMachine(vmconfig))
    for vm in vminstances:
        vm.setup()
        vm.up()

def stop_session():
    #TODO
    for vm in vminstances:
        vm.halt()


def update_vms_names():
    vms_list = vagrant_utils.list_vms()
    vms_names = vagrant_utils.list_vms_by_name(vms=vms_list)
    OPTIONS["ssh"] = sorted(vms_names.keys())
    readline.set_completer(Completer(OPTIONS).complete)


def general_help():
    #TODO
    return


def help(cmd):
    #TODO
    regex = re.compile(cmd)
    choices = list(filter(regex.match,switcher.keys()))
    if len(choices) > 1:
        print("Select one option:")
        for c in choices:
            print("\t"+c)
    return


def exit_from_program(args):
    #TODO
    sys.exit()
    return




########################################################################

current_session = session.Session()

switcher = {
        # iface methods
        "iface create": create_inteface,
        "iface list": iface_list,

        # vm methods
        "vm create": create_machine,
        "vm list": vm_list,

        # session methods
        "session save": save_session,
        "session load": load_session,
        "session show": current_session.show,
        "session start": start_session,

        # playbooks methods
        #TODO
        "ssh": ssh,



        # program methods
        "help": general_help,
        "exit": exit_from_program
        }

def switch(cmd):
    choices = list()
    for k in switcher.keys():
        if re.match(k,cmd):
            choices.append(k)
    if len(choices) == 1:
        args = list(filter(None, cmd.split(choices[0])))
        if len(args) > 0:
            return switcher[choices[0]](args[0].strip())
        else:
            return switcher[choices[0]]()
    elif cmd.strip() is not "":
        help(cmd.split()[0].strip())
    return 


def input_loop():
    if current_session.load():
        print("Current session:")
        print(current_session)
    update_vms_names()
    readline.set_completer(Completer(OPTIONS).complete)
    readline.read_init_file('readline_config.rc')


    while True:
        try:
            cmd = input("> ")
            switch(cmd)
        except EOFError:
            sys.exit()
