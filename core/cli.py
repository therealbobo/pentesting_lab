#! /usr/bin/env python3

import sys
import re 



import core.vmconfig as vmconfig
import core.vde2 as vde2
import core.session as session
import core.presentation as presentation
#from utils.completer import Completer
import utils.vagrant_utils as vagrant_utils

try: import gnureadline as readline
except ImportError:
    import readline

#TODO move in utils/completer
class Completer:
    def __init__(self, options):
        self.options = options
        self.current_candidates = []

    def complete(self, text, state): 
        response = None 
        if state == 0:
            original_line = readline.get_line_buffer()
            begin = readline.get_begidx()
            end = readline.get_endidx()
            being_completed = original_line[begin:end]
            words = original_line.split()
            
            if not words:
                self.current_candidates = sorted(self.options.keys())
            else:
                try:
                    if begin == 0:
                        #first word
                        candidates = self.options.keys()
                    else:
                        # later word
                        first = words[0]
                        candidates = self.options[first]
                    
                    if being_completed:
                        self.current_candidates = [ w for w in candidates if w.startswith(being_completed)]
                    else:
                        self.current_candidates = candidates
                except (KeyError, IndexError) as err: 
                    self.current_candidates = [] 
        try:
            response = self.current_candidates[state]
        except IndexError:
            response = None

        return response


#########################################################

current_session = session.Session()

def vm_list():
    return presentation.print_vms_general(current_session)

def iface_list():
    return presentation.print_network_interfaces(current_session)


def create_inteface():
    #TODO
    print("--- Creating net interface ---")
    path = input("Enter iface path: ")
    config = vde2.VdeSwitch(path)
    current_session.add_iface(config)

def create_machine():
    #TODO
    print("--- Creating machine ---")
    name = input("Enter name of vm: ")
    box = input("Enter name of the box: ")
    network_interfaces = input("Enter network interfaces: ").split(" ")
    packages = input("Enter packages: ").split(" ")
    #TODO: better parsing, multiple select
    config = vmconfig.VMConfig(name=name, box=box, gui=False, linked_clone=False,
            network_interfaces=network_interfaces, packages=packages)
    current_session.add_vm(config)


OPTIONS = {
        'vm':['list','create'],
        'iface':['list','create'],
        'session':['show','create','save','load'],
        'ssh':[],
        'help':[],
        'exit':[]
    }


def update_vms_names():
    vms_list = vagrant_utils.list_vms()
    vms_names = vagrant_utils.list_vms_by_name(vms=vms_list)
    OPTIONS["ssh"] = sorted(vms_names.keys())
    readline.set_completer(Completer(OPTIONS).complete)


def exit_from_program(args):
    #TODO
    sys.exit()
    return




########################################################################

current_session = session.Session()

switcher = {
        # iface methods
        "iface create": create_inteface,
        "iface list": iface_list,

        # vm methods
        "vm create": create_machine,
        "vm list": vm_list,

        # session methods
        "session save": current_session.save,
        "session show": current_session.show,
        "exit": exit_from_program
        }

def switch(cmd):
    regex = re.compile(cmd)
    for c in switcher.keys():
        if regex.match(c):
            args = cmd.split(c)[1].strip()
            return switcher[c]()
    return 
def input_loop():
    if current_session.load():
        print("Current session:")
        print(current_session)
    update_vms_names()
    readline.set_completer(Completer(OPTIONS).complete)
    readline.read_init_file('readline_config.rc')


    while True:
        try:
            cmd = input("> ")
            switch(cmd)
        except EOFError:
            sys.exit()
