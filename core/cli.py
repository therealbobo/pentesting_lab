#! /usr/bin/env python3

import sys
import re 



import core.vmconfig as vmconfig


try: import gnureadline as readline
except ImportError:
    import readline

class Completer:
    def __init__(self, options):
        self.options = options
        self.current_candidates = []

    def complete(self, text, state): 
        response = None 
        if state == 0:
            original_line = readline.get_line_buffer()
            begin = readline.get_begidx()
            end = readline.get_endidx()
            being_completed = original_line[begin:end]
            words = original_line.split()
            
            if not words:
                self.current_candidates = sorted(self.options.keys())
            else:
                try:
                    if begin == 0:
                        #first word
                        candidates = self.options.keys()
                    else:
                        # later word
                        first = words[0]
                        candidates = self.options[first]
                    
                    if being_completed:
                        self.current_candidates = [ w for w in candidates if w.startswith(being_completed)]
                    else:
                        self.current_candidates = candidates
                except (KeyError, IndexError) as err: 
                    self.current_candidates = [] 
        try:
            response = self.current_candidates[state]
        except IndexError:
            response = None

        return response

def create_inteface(args):
    #TODO
    print("creating interace")

def create_machine(args):
    #TODO
    #__init__(self, name=None, box="ubuntu/xenial64", gui=False, linked_clone=False, network_interfaces=list(), packages=list()):
    print("creating machine")
    name = input("Enter name of vm: ")
    box = input("Enter name of the box: ")
    network_interfaces = input("Enter network interfaces: ").split(" ")
    packages = input("Enter packages: ").split(" ")
    #TODO: better parsing, multiple select
    config = vmconfig.VMConfig(name=name, box=box, gui=False, linked_clone=False,
            network_interfaces=network_interfaces, packages=packages)
    print(config.save())




def exit_from_program(args):
    #TODO
    sys.exit()
    return

OPTIONS = {
        'new':['vm','iface'],
        'connect':[],
        'ssh':[],
        'list':['vms', 'ifaces'],
        'exit':[]}

switcher = {
        "new iface": create_inteface,
        "new vm": create_machine,
        "exit": exit_from_program
        }


def switch(cmd):
    regex = re.compile(cmd)
    for c in switcher.keys():
        if regex.match(c):
            args = cmd.split(c)[1].strip()
            return switcher[c](args)
    return 



readline.read_init_file('readline_config.rc')
readline.set_completer(Completer(OPTIONS).complete)


def input_loop():
    while True:
        try:
            cmd = input("> ")
            switch(cmd)
        except EOFError:
            sys.exit()
