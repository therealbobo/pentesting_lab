#!/usr/bin/env python3

import npyscreen
import contextlib
import random

class App(npyscreen.StandardApp):
    def onStart(self):
        # Set the theme. DefaultTheme is used by default
        npyscreen.setTheme(npyscreen.Themes.ColorfulTheme)
        self.addForm("MAIN", MainForm, name="Main Form")

class ActionBox(npyscreen.ActionForm):
    # MultiLineEdit now will be surrounded by boxing
    _contained_widget = npyscreen.MultiLineEdit

class InputBox(npyscreen.Autocomplete):
    # MultiLineEdit now will be surrounded by boxing
    #_contained_widget = npyscreen.MultiLineEdit
    def auto_complete(inputch):
        quit
    

class MainForm(npyscreen.FormBaseNew):
    def create(self):
        # getting terminal size
        y, x = self.useable_space()

        # Upperbox
        upperbox = self.add(npyscreen.BoxTitle, name="UpperBoxTitle", 
                # dimensions
                rely=1 , max_width=x - 4, max_height=y // 4 *3,
                editable=False)
              #custom_highlighting=True, values=["first line", "second line"],

        # Lowerbox
        lowerbox = self.add(InputBox, name="Enter commands here or type help", 
                # dimensions
                rely=y//4*3+1, max_width=x-4, max_height=y//4-1,
                editable=True)

        #color1 = self.theme_manager.findPair(self, 'GOOD')
        #color2 = self.theme_manager.findPair(self, 'WARNING')
        #color3 = self.theme_manager.findPair(self, 'NO_EDIT')

        #color_list = [color1, color2, color3]
        #first_line_colors = [random.choice(color_list) for i in range(len("first line"))]
        #second_line_colors = [random.choice(color_list) for i in range(len("second"))]
        ## Fill the lines with custom colors
        #obj.entry_widget.highlighting_arr_color_data = [first_line_colors, second_line_colors]




if __name__=='__main__':
    MyApp = App()
    MyApp.run()

